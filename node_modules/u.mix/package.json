{
  "name": "u.mix",
  "version": "0.3.0",
  "description": "Mix object properties",
  "main": "mix.js",
  "dependencies": {
    "u.each": "latest"
  },
  "keywords": [
    "extend",
    "inherit",
    "mixin"
  ],
  "author": {
    "name": "Pau Frac√©s",
    "email": "pfraces@gmail.com"
  },
  "license": "MIT",
  "readme": "# mix\n\nMix objeect properties\n\n# Usage\n\n```js\nmix(a, b, c).in(target);\n```\n\nAny number of objects can be passed to the constructor. The mix algorithm\nwill not alter that source objects.\n\nThe `in` method returns the resulting mixed object and accepts a target\nto mix the sources in. If no target is passed a new object is\ncreated for that purpose.\n\n```js\nvar mix = require('u.mix');\n\nvar fuz = mix({ a: 1 }, { b: 2, c: 3 }, { d: 4 }).in();\nconsole.log(fuz); // { a: 1, b: 2, c: 3, d: 4 }\n```\nLast wins\n\n```js\nvar fuz = mix({ a: 1 }, { a: 2 }, { a: 3 }).in();\nconsole.log(fuz); // { a: 3 }\n```\n\nObjects received are unaltered\n\n```js\nvar foo = { a: 1, b: 2 },\n    bar = { a: 4, c: 3 },\n    fuz = mix(foo, bar).in();\n\nconsole.log(foo); // { a: 1, b: 2 }\nconsole.log(bar); // { a: 4, c: 3 }\nconsole.log(fuz); // { a: 4, b: 2, c: 3 }\n```\n\nMix into a target\n\n```js\nvar foo = { a: 1 },\n    bar = { b: 2 },\n    qux = { c: 3 },\n    fuz = mix(bar, qux).in(foo);\n\nconsole.log(foo);         // { a: 1, b: 2, c: 3 }\nconsole.log(bar);         // { a: 2 }\nconsole.log(qux);         // { b: 3 }\nconsole.log(fuz === foo); // true\n```\n\n# install\n\n    npm install u.mix\n\n# Motivation\n\nStraightforward oject mixing library, aimed for simple tasks.\n",
  "readmeFilename": "README.md",
  "_id": "u.mix@0.3.0",
  "_from": "u.mix@latest"
}
